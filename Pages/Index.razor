@page "/"
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<nav class="navbar fixed-top navbar-light bg-light">
    <h3>Score Keeper</h3>
    <div style="margin-left: auto;">
        <div class="ml-auto">
            <button class="btn btn-outline-primary showWhenLargeAndMedium" type="button" @onclick="NextRound">@nextRoundFinsh</button>
            <button class="btn btn-outline-secondary showWhenLargeAndMedium" type="button" @onclick="AddPlayer">Add Player</button>

            <div class="btn-group">
                <button data-toggle="dropdown" type="button" class="btn btn-light" @onclick="ToggleSettingsMenu">
                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-three-dots-vertical" fill="currentColor">
                        <path fill-rule="evenodd" d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"></path>
                    </svg>
                </button>
                <div class="dropdown-menu dropdown-menu-right @dropDownMenuCSS" aria-labelledby="dropdownMenuButton">
                    <button class="dropdown-item showWhenSmall" type="button" @onclick="AddPlayer">Add Player</button>
                    <button class="dropdown-item showWhenSmall" type="button" @onclick="NextRound">@nextRoundFinsh</button>

                    <div class="dropdown-divider showWhenSmall"></div>

                    <button class="dropdown-item" type="button" @onclick="NewGame">New Game</button>
                    <button class="dropdown-item" type="button" @onclick="ResetGame">Reset</button>
                </div>
            </div>

        </div>
    </div>
</nav>

<div class="table-responsive">
    <table id="gameTable" class="table table-striped table-sm table-hover table-condensed">
        <thead>
            <tr>
                <th scope="col"></th>
                <th scope="col" class="text-nowrap text-center">1</th>
                <th scope="col" class="text-nowrap text-center">2</th>
                <th scope="col" class="text-nowrap text-center">3</th>
                <th scope="col" class="text-nowrap text-center">4</th>
                <th scope="col" class="text-nowrap text-center">5</th>
                <th scope="col" class="text-nowrap text-center">6</th>
                <th scope="col" class="text-nowrap text-center">7</th>
                <th scope="col" class="text-nowrap text-center">8</th>
                <th scope="col" class="text-nowrap text-center">9</th>
                <th scope="col" class="text-nowrap text-center">10</th>
                <th scope="col" class="text-nowrap text-center">11</th>
                <th scope="col" class="text-nowrap text-center">F</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var player in _players)
            {
            <tr>
                <th scope="row" class="text-nowrap text-center" style="width: 15%;">
                    <div class="editable-field">
                        <input class="editable-input" type="text" @bind="player.Name" onclick="this.select()" />
                    </div>
                </th>
                @foreach (var score in player.PlayerScoreDict.OrderBy(s => s.RoundNumber).ToList())
                    {
                <td class="editable-cell">
                    <div class="editable-field">
                        <input class="editable-input" type="number" min="0" step="1" autofocus @bind="score.Score" @onfocusout="(() => CalculateFinalScore(player))" onclick="this.select()" />
                    </div>
                </td>
                    }
                <td id="@player.PlayerNumber" class="text-nowrap text-center" contenteditable="false">T: @player.FinalScore</td>
            </tr>
            }
        </tbody>
    </table>
</div>

<FiveCrownsScoreKeeper.Pages.FinishGameModal @ref="Modal">
    <Title>
        <em>
            @if (_players.Count > 0)
            {
                @_players.OrderBy(p => p.FinalScore).FirstOrDefault().Name
            }
            won!!
        </em>
    </Title>
    <Body>
        <ul class="list-group">
            @foreach (var player in _players.OrderBy(p => p.FinalScore).ToList())
            {
            <li class="list-group-item">
                <span>@player.Name</span> :
                <span>@player.FinalScore</span>
            </li>
            }
        </ul>
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Modal.Close()">Close</button>
    </Footer>
</FiveCrownsScoreKeeper.Pages.FinishGameModal>

@code {
    private List<PlayerModel> _players = new List<PlayerModel>();

    private FinishGameModal Modal { get; set; }

    private string dropDownMenuCSS = "";
    private string nextRoundFinsh = "Next Round";

    protected override async Task OnInitializedAsync()
    {
        //await localStorage.SetItemAsync("name", "Test");
        //var name = await localStorage.GetItemAsync<string>("name");

        var players = await localStorage.GetItemAsync<List<PlayerModel>>("_players");

        if (players != null)
        {
            _players = players;
        }
    }

    private void AddPlayer()
    {
        PlayerModel newPlayer = new PlayerModel
        {
            PlayerNumber = 1 + _players.Count,
            Name = $"Player {1 + _players.Count}"
        };

        if (_players.Count > 0)
        {
            foreach (var scoreDictionary in _players[0].PlayerScoreDict)
            {
                ScoreModel newPlayerScore = new ScoreModel()
                {
                    RoundNumber = scoreDictionary.RoundNumber,
                    Score = 0
                };
                newPlayer.PlayerScoreDict.Add(newPlayerScore);
            }
        }
        else
        {
            ScoreModel newPlayerScore = new ScoreModel()
            {
                RoundNumber = 0,
                Score = 0
            };
            newPlayer.PlayerScoreDict.Add(newPlayerScore);
        }

        _players.Add(newPlayer);
        localStorage.SetItemAsync<List<PlayerModel>>("_players", _players);

        if (!string.IsNullOrWhiteSpace(dropDownMenuCSS))
        {
            ToggleSettingsMenu();
        }
    }

    private void CalculateFinalScore(PlayerModel player)
    {
        int finalScore = 0;
        foreach (var score in player.PlayerScoreDict)
        {
            finalScore += score.Score;
        }
        player.FinalScore = finalScore;

        localStorage.SetItemAsync<List<PlayerModel>>("_players", _players);
    }

    private void ToggleSettingsMenu()
    {
        dropDownMenuCSS = string.IsNullOrWhiteSpace(dropDownMenuCSS) ? "show" : "";
    }

    private void NextRound()
    {
        if (_players.Count > 0 && nextRoundFinsh != "Finish Game")
        {
            if (_players[0].PlayerScoreDict.LastOrDefault().RoundNumber >= 9)
            {
                nextRoundFinsh = "Finish Game";
            }
            foreach (var player in _players)
            {
                ScoreModel newPlayerScore = new ScoreModel()
                {
                    RoundNumber = player.PlayerScoreDict.Count,
                    Score = 0
                };
                player.PlayerScoreDict.Add(newPlayerScore);
            }
        }
        else if (nextRoundFinsh == "Finish Game")
        {
            FinishGame();
        }

        localStorage.SetItemAsync<List<PlayerModel>>("_players", _players);

        if (!string.IsNullOrWhiteSpace(dropDownMenuCSS))
        {
            ToggleSettingsMenu();
        }
    }

    private void NewGame()
    {
        foreach (var player in _players)
        {
            player.PlayerScoreDict.Clear();

            ScoreModel newPlayerScore = new ScoreModel()
            {
                RoundNumber = 0,
                Score = 0
            };
            player.PlayerScoreDict.Add(newPlayerScore);
            player.FinalScore = 0;
        }
        localStorage.SetItemAsync<List<PlayerModel>>("_players", _players);
        ToggleSettingsMenu();
        nextRoundFinsh = "Next Round";
    }

    private void ResetGame()
    {
        _players.Clear();
        localStorage.ClearAsync();
        ToggleSettingsMenu();
        nextRoundFinsh = "Next Round";
    }

    private void FinishGame()
    {
        Modal.Open();
    }
}